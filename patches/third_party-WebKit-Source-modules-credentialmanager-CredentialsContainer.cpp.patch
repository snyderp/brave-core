diff --git a/third_party/WebKit/Source/modules/credentialmanager/CredentialsContainer.cpp b/third_party/WebKit/Source/modules/credentialmanager/CredentialsContainer.cpp
index 261342a76dc28ddf898abd5fb7b8b73ed67797c6..08837d8fc30133a285278ccc9ee305599a98a89e 100644
--- a/third_party/WebKit/Source/modules/credentialmanager/CredentialsContainer.cpp
+++ b/third_party/WebKit/Source/modules/credentialmanager/CredentialsContainer.cpp
@@ -207,6 +207,7 @@ bool CheckPublicKeySecurityRequirements(ScriptPromiseResolver* resolver,
 
 // Checks if the icon URL of |credential| is an a-priori authenticated URL.
 // https://w3c.github.io/webappsec-credential-management/#dom-credentialuserdata-iconurl
+#if defined(MUON_CHROMIUM_BUILD)
 bool IsIconURLEmptyOrSecure(const Credential* credential) {
   if (!credential->IsPasswordCredential() &&
       !credential->IsFederatedCredential()) {
@@ -226,6 +227,7 @@ bool IsIconURLEmptyOrSecure(const Credential* credential) {
          url.ProtocolIsData() ||
          SecurityOrigin::Create(url)->IsPotentiallyTrustworthy();
 }
+#endif
 
 DOMException* CredentialManagerErrorToDOMException(
     CredentialManagerError reason) {
@@ -260,12 +262,14 @@ DOMException* CredentialManagerErrorToDOMException(
   return nullptr;
 }
 
+#if defined(MUON_CHROMIUM_BUILD)
 void OnStoreComplete(std::unique_ptr<ScopedPromiseResolver> scoped_resolver,
                      RequiredOriginType required_origin_type) {
   auto* resolver = scoped_resolver->Release();
   AssertSecurityRequirementsBeforeResponse(resolver, required_origin_type);
   resolver->Resolve();
 }
+#endif
 
 void OnPreventSilentAccessComplete(
     std::unique_ptr<ScopedPromiseResolver> scoped_resolver) {
@@ -276,6 +280,7 @@ void OnPreventSilentAccessComplete(
   resolver->Resolve();
 }
 
+#if defined(MUON_CHROMIUM_BUILD)
 void OnGetComplete(std::unique_ptr<ScopedPromiseResolver> scoped_resolver,
                    RequiredOriginType required_origin_type,
                    CredentialManagerError error,
@@ -293,6 +298,7 @@ void OnGetComplete(std::unique_ptr<ScopedPromiseResolver> scoped_resolver,
     resolver->Reject(CredentialManagerErrorToDOMException(error));
   }
 }
+#endif
 
 DOMArrayBuffer* VectorToDOMArrayBuffer(const Vector<uint8_t> buffer) {
   return DOMArrayBuffer::Create(static_cast<const void*>(buffer.data()),
@@ -331,6 +337,7 @@ void OnMakePublicKeyCredentialComplete(
   }
 }
 
+#if defined(MUON_CHROMIUM_BUILD)
 void OnGetAssertionComplete(
     std::unique_ptr<ScopedPromiseResolver> scoped_resolver,
     AuthenticatorStatus status,
@@ -368,7 +375,7 @@ void OnGetAssertionComplete(
         mojo::ConvertTo<CredentialManagerError>(status)));
   }
 }
-
+#endif
 }  // namespace
 
 CredentialsContainer* CredentialsContainer::Create() {
@@ -380,6 +387,7 @@ CredentialsContainer::CredentialsContainer() = default;
 ScriptPromise CredentialsContainer::get(
     ScriptState* script_state,
     const CredentialRequestOptions& options) {
+#if defined(MUON_CHROMIUM_BUILD)
   ScriptPromiseResolver* resolver = ScriptPromiseResolver::Create(script_state);
   ScriptPromise promise = resolver->Promise();
 
@@ -468,10 +476,14 @@ ScriptPromise CredentialsContainer::get(
                 required_origin_type));
 
   return promise;
+#else
+  return ScriptPromise{};
+#endif
 }
 
 ScriptPromise CredentialsContainer::store(ScriptState* script_state,
                                           Credential* credential) {
+#if defined(MUON_CHROMIUM_BUILD)
   ScriptPromiseResolver* resolver = ScriptPromiseResolver::Create(script_state);
   ScriptPromise promise = resolver->Promise();
 
@@ -504,6 +516,9 @@ ScriptPromise CredentialsContainer::store(ScriptState* script_state,
                 required_origin_type));
 
   return promise;
+#else 
+  return ScriptPromise{}; 
+#endif
 }
 
 ScriptPromise CredentialsContainer::create(
